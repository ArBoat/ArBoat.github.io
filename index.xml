<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArBlog</title>
    <link>https://arboat.github.io/</link>
    <description>Recent content on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2020 00:05:00 +0800</lastBuildDate>
    
        <atom:link href="https://arboat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>206.Reverse Linked List</title>
        <link>https://arboat.github.io/posts/leetcode-206.reverse-linked-list/</link>
        <pubDate>Tue, 21 Jul 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-206.reverse-linked-list/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-206.reverse-linked-list/ -&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iteratively&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)，假设 n 是列表的长度，时间复杂度是 O(n)。&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func reverseList(head *ListNode) *ListNode {
    var pre *ListNode
    for head != nil {
        head, pre, head.Next = head.Next, head, pre
    }
    // for head != nil {
    //  	temp:=head.Next
    //  	head.Next = pre
    //  	pre = head
    //  	head = temp
    //}
    return pre
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyhton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def reverseList(self, head: ListNode) -&amp;gt; ListNode:
        prev = None
        while head:
           # head,prev,head=head.next,head,prev
           temp = head.next
           head.next = prev
           prev = head
           head = temp
        return prev
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)，假设 n 是列表的长度，那么时间复杂度为 O(n)。&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 n 层。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func reverseList(head *ListNode) *ListNode {
if head == nil || head.Next == nil {
    return head
}
pre:=reverseList(head.Next)
head.Next.Next = head
head.Next = nil
return pre
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyhton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def reverseList(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        prev = None
        if head == None or head.next == None: return head
        prev = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return prev&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-206.reverse-linked-list/ - </description>
        </item>
    
    
    
        <item>
        <title>24.Swap Nodes in Pairs</title>
        <link>https://arboat.github.io/posts/leetcode-24.swap-nodes-in-pairs/</link>
        <pubDate>Tue, 21 Jul 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-24.swap-nodes-in-pairs/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-24.swap-nodes-in-pairs/ -&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iteratively&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)，假设 n 是列表的长度，时间复杂度是 O(n)。&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func swapPairs(head *ListNode) *ListNode {
    guard:=&amp;amp;ListNode{Next:head}
    temp:=guard
    for temp.Next != nil &amp;amp;&amp;amp; temp.Next.Next != nil {
        first := temp.Next
        second := temp.Next.Next
        temp.Next = second
        first.Next = second.Next
        second.Next = first
        temp = first    // 已经交换为第二个
    }
    return guard.Next
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyhton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def swapPairs(self, head: ListNode) -&amp;gt; ListNode:
    pre = ListNode(0)
    pre.next = head
    temp = pre
    while temp.next !=None and temp.next.next != None:
        first = temp.next
        second = temp.next.next
        temp.next = second
        first.next = second.next
        second.next = first
        temp = first
    return pre.next
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)，假设 n 是列表的长度，那么时间复杂度为 O(n)。&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 n 层。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func swapPairs(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    }
    temp := head.Next
    head.Next = swapPairs(temp.Next)
    temp.Next = head
    return temp
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyhton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def swapPairs(self, head: ListNode) -&amp;gt; ListNode:
        if head == None or head.next == None: return head
        second = head.next
        head.next = self.swapPairs(second.next)
        second.next = head
        return second&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-24.swap-nodes-in-pairs/ - </description>
        </item>
    
    
    
        <item>
        <title>25.Reverse Nodes in k-Group</title>
        <link>https://arboat.github.io/posts/leetcode-25.reverse-nodes-in-k-group/</link>
        <pubDate>Tue, 21 Jul 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-25.reverse-nodes-in-k-group/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-25.reverse-nodes-in-k-group/ -&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */ 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度为 O(n*K)最好的情况为 O(n) 最差的情况未 O(n^2)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)，除了几个必须的节点指针外，并没有占用其他空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    func reverseKGroup(head *ListNode, k int) *ListNode {
    dummy:= &amp;amp;ListNode{Next:head}  //point 1
    pre:=dummy                   //point 2
    for head != nil {
        tail:=pre                //point 3
        for i:=0;i&amp;lt;k;i++{
            tail = tail.Next
            if tail == nil {
                return dummy.Next
            }
        }
        temp:=tail.Next
        head, tail = reverse(head,tail)
        pre.Next = head
        tail.Next = temp
        pre = tail
        head = pre.Next
    }
    return dummy.Next
}

func reverse(head,tail *ListNode) (*ListNode, *ListNode) {
    p:=head                   //point 4
    var prev *ListNode        // point 5
    for prev != tail {
        temp:=p.Next
        p.Next = prev
        prev = p
        p = temp
    }
    return tail,head
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyhton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -&amp;gt; ListNode:
        dummy = ListNode(0)
        dummy.next = head
        pre = dummy
        while head:
            tail = pre
            for i in range(k):
                tail = tail.next
                if tail == None:
                    return dummy.next
            temp = tail.next
            head, tail = self.reverse(head,tail)
            pre.next = head
            tail.next = temp
            pre = tail
            head = pre.next
        return dummy.next

    def reverse(self, head, tail):
        p = head
        pre = None
        while pre != tail:
            temp = p.next
            p.next = pre
            pre = p
            p = temp
        return tail,head&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-25.reverse-nodes-in-k-group/ - </description>
        </item>
    
    
    
        <item>
        <title>102.Binary Tree Level Order Traversal</title>
        <link>https://arboat.github.io/posts/leetcode-102.binary-tree-level-order-traversal/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-102.binary-tree-level-order-traversal/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-102.binary-tree-level-order-traversal/ -&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
少赋值内存占用少
var res = make([]int, 0)       // leetcode 多个测试用例的时候要重置为零值
func postorderTraversal(root *TreeNode) []int {
    res=make([]int,0)
    postoder(root)
    return res
}
func postoder(root *TreeNode) {
    if root != nil {
        postoder(root.Left)
        postoder(root.Right)
        res=append(res,root.Val)
    }
}

// 两次append
func postorderTraversal(root *TreeNode) []int {
    if root == nil {
        return []int{}
    }
    res := append(postorderTraversal(root.Left),postorderTraversal(root.Right)...)
    res = append (res,root.Val)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iteratively&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func postorderTraversal(root *TreeNode) []int {
    var res []int
    var stack []*TreeNode
    for len(stack)&amp;gt;0 || root != nil {  // 为了第一次判断nil
        for root != nil {
            res = append([]int{root.Val}, res...)
            stack = append(stack, root.Left)
            root = root.Right
        }
        root = stack[len(stack)-1]
        stack = stack[:len(stack)-1]
    }
    return res
}
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-102.binary-tree-level-order-traversal/ - </description>
        </item>
    
    
    
        <item>
        <title>104.Maximum Depth of Binary Tree</title>
        <link>https://arboat.github.io/posts/leetcode-104.maximum-depth-of-binary-tree/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-104.maximum-depth-of-binary-tree/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-104.maximum-depth-of-binary-tree/ -&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(height) 树的高度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
func maxDepth(root *TreeNode) int {
    if root == nil {
        return 0
    }
    return max(maxDepth(root.Left),maxDepth(root.Right)) + 1
}
func max(a,b int) int {
    if a &amp;gt; b {
        return a
    }
    return b
}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-104.maximum-depth-of-binary-tree/ - </description>
        </item>
    
    
    
        <item>
        <title>105.Construct Binary Tree from Preorder and Inorder Traversal</title>
        <link>https://arboat.github.io/posts/leetcode-105.construct-binary-tree-from-preorder-and-inorder-traversal/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-105.construct-binary-tree-from-preorder-and-inorder-traversal/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-105.construct-binary-tree-from-preorder-and-inorder-traversal/ -&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val   int
*     Left  *TreeNode
*     Right *TreeNode
* }
*/


func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    for root!=nil {
        switch {
            case p.Val &amp;gt; root.Val &amp;amp;&amp;amp; q.Val &amp;gt; root.Val:
                root = root.Right
            case p.Val &amp;lt; root.Val &amp;amp;&amp;amp; q.Val &amp;lt; root.Val:
                root = root.Left
            default:
                return root
        }
    }
    return nil
}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-105.construct-binary-tree-from-preorder-and-inorder-traversal/ - </description>
        </item>
    
    
    
        <item>
        <title>111.Minimum Depth of Binary Tree</title>
        <link>https://arboat.github.io/posts/leetcode-111.minimum-depth-of-binary-tree/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-111.minimum-depth-of-binary-tree/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-111.minimum-depth-of-binary-tree/ -&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
func minDepth(root *TreeNode) int {
    if root == nil {
        return 0
    }
    l := minDepth(root.Left)
    r := minDepth(root.Right)
    // 只有一个叶子节点 要返回另一边
    if root.Left == nil {
        return r+1
    }
    if root.Right == nil {
        return l+1
    }
    return min(l, r) + 1
}
func min(a, b int) int {
    if a &amp;lt; b {
        return a
    }
    return b
}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-111.minimum-depth-of-binary-tree/ - </description>
        </item>
    
    
    
        <item>
        <title>144.Binary Tree Preorder Traversal</title>
        <link>https://arboat.github.io/posts/leetcode-144.binary-tree-preorder-traversal/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-144.binary-tree-preorder-traversal/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-144.binary-tree-preorder-traversal/ -&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
少赋值内存占用少
var res = make([]int, 0)       // leetcode 多个测试用例的时候要重置为零值
func preorderTraversal(root *TreeNode) []int {
    res = make([]int,0)
    preorder(root)
    return res
}
func preorder(root *TreeNode){
    if root != nil {
        res = append(res,root.Val)
        preorder(root.Left)
        preorder(root.Right)
    }
}

// 两次append
func preorderTraversal(root *TreeNode) []int {
    if root == nil {
        return []int{}
    }
    res := append([]int{root.Val},preorderTraversal(root.Left)...)
    res = append(res,preorderTraversal(root.Right)...)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iteratively&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func preorderTraversal(root *TreeNode) []int {
    var res []int
    var stack []*TreeNode
    for len(stack)&amp;gt;0 || root != nil {  // 为了第一次判断nil
        for root != nil {
            res = append(res,root.Val)
            stack = append(stack,root.Right)
            root = root.Left
        }
        root = stack[len(stack)-1]
        stack = stack[:len(stack)-1]
    }
    return res
}
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-144.binary-tree-preorder-traversal/ - </description>
        </item>
    
    
    
        <item>
        <title>145.Binary Tree Postorder Traversal</title>
        <link>https://arboat.github.io/posts/leetcode-145.binary-tree-postorder-traversal/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-145.binary-tree-postorder-traversal/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-145.binary-tree-postorder-traversal/ -&lt;h1 id=&#34;recursively&#34;&gt;recursively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
少赋值内存占用少
var res = make([]int, 0)       // leetcode 多个测试用例的时候要重置为零值
func postorderTraversal(root *TreeNode) []int {
    res=make([]int,0)
    postoder(root)
    return res
}
func postoder(root *TreeNode) {
    if root != nil {
        postoder(root.Left)
        postoder(root.Right)
        res=append(res,root.Val)
    }
}

// 两次append
func postorderTraversal(root *TreeNode) []int {
    if root == nil {
        return []int{}
    }
    res := append(postorderTraversal(root.Left),postorderTraversal(root.Right)...)
    res = append (res,root.Val)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iteratively&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func postorderTraversal(root *TreeNode) []int {
    var res []int
    var stack []*TreeNode
    for len(stack)&amp;gt;0 || root != nil {  // 为了第一次判断nil
        for root != nil {
            res = append([]int{root.Val}, res...)
            stack = append(stack, root.Left)
            root = root.Right
        }
        root = stack[len(stack)-1]
        stack = stack[:len(stack)-1]
    }
    return res
}
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-145.binary-tree-postorder-traversal/ - </description>
        </item>
    
    
    
        <item>
        <title>21. Merge Two Sorted Lists</title>
        <link>https://arboat.github.io/posts/leetcode-21.merge-two-sorted-lists/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-21.merge-two-sorted-lists/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-21.merge-two-sorted-lists/ -&lt;h1 id=&#34;递归-recursion&#34;&gt;递归 recursion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n+m)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n+m)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for singly-linked list.
* type ListNode struct {
*     Val int
*     Next *ListNode
* }
*/
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
    if l1 == nil {
        return l2
    } else if l2 == nil {
        return l1
    } else if l1.Val &amp;lt; l2.Val {
        l1.Next = mergeTwoLists(l1.Next,l2)
        return l1
    } else {
        l2.Next = mergeTwoLists(l1,l2.Next)
        return l2
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -&amp;gt; ListNode:
        if l1 == None: return l2
        elif l2 == None: return l1
        elif l1.val &amp;lt; l2.val: 
            l1.next = self.mergeTwoLists(l1.next,l2)
            return l1
        else:
            l2.next = self.mergeTwoLists(l1,l2.next)
            return l2
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;迭代-iteration&#34;&gt;迭代 iteration&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
    preNode:=&amp;amp;ListNode{}
    pre := preNode
    for l1 != nil &amp;amp;&amp;amp; l2 !=nil {
        if l1.Val &amp;lt; l2.Val {
            pre.Next = l1
            l1 = l1.Next
        } else {
            pre.Next = l2
            l2 = l2.Next
        }
        pre = pre.Next
    }
    if l1 == nil{
        pre.Next = l2
    } else {
        pre.Next = l1
    }
    return preNode.Next
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def mergeTwoLists(self, l1, l2):
        &amp;quot;&amp;quot;&amp;quot;
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        prehead=ListNode(0)
        pre=prehead
        while l1 and l2:
            if l1.val &amp;lt; l2.val:
                pre.next = l1
                l1 = l1.next
            else:
                pre.next = l2
                l2 = l2.next
            pre = pre.next
        if l1:pre.next=l1
        else:pre.next=l2
        return prehead.next
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-21.merge-two-sorted-lists/ - </description>
        </item>
    
    
  </channel>
</rss> 