<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArBlog</title>
    <link>https://arboat.github.io/</link>
    <description>Recent content on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2020 00:05:00 +0800</lastBuildDate>
    
        <atom:link href="https://arboat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>98.Validate Binary Search Tree</title>
        <link>https://arboat.github.io/posts/leetcode-98.validate-binary-search-tree/</link>
        <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-98.validate-binary-search-tree/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-98.validate-binary-search-tree/ -&lt;h1 id=&#34;递归-recursion&#34;&gt;递归 recursion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
func isValidBST(root *TreeNode) bool {
    return validate(root,math.MinInt64, math.MaxInt64)
}
func validate(root *TreeNode, l, r int) bool {
    if root == nil {
        return true
    }
    if root.Val &amp;lt;= l || root.Val &amp;gt;= r {
        return false
    }
    return validate(root.Left,l,root.Val) &amp;amp;&amp;amp; validate(root.Right,root.Val,r)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iteratively&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;h1 id=&#34;iteratively-1&#34;&gt;iteratively&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Definition for a binary tree node.
* type TreeNode struct {
*     Val int
*     Left *TreeNode
*     Right *TreeNode
* }
*/
func isValidBST(root *TreeNode) bool {
    var res []int
    var stack []*TreeNode
    for len(stack)&amp;gt;0 || root != nil {
        for root != nil{
            stack = append(stack,root)
            root = root.Left
        }
        //方式out of range
        if len(res)&amp;gt;0 {
            // 严格小
            if stack[len(stack)-1].Val &amp;lt;= res[len(res)-1] {
                return false
            }
        }
        res = append(res, stack[len(stack)-1].Val)
        root = stack[len(stack)-1].Right
        stack = stack[:len(stack)-1]
    } 
    return true
}
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-98.validate-binary-search-tree/ - </description>
        </item>
    
    
    
        <item>
        <title>20.Valid Parentheses</title>
        <link>https://arboat.github.io/posts/leetcode-20.valid-parentheses/</link>
        <pubDate>Mon, 01 Jun 2020 00:00:06 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-20.valid-parentheses/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-20.valid-parentheses/ -&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stack&#34;&gt;stack&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func isValid(s string) bool {
    if s == &amp;quot;&amp;quot;{
        return true
    }
    if len(s)%2!=0 {
        return false
    }
    m:= map[rune]rune{&#39;)&#39;:&#39;(&#39;,&#39;]&#39;:&#39;[&#39;,&#39;}&#39;:&#39;{&#39;}
    单引号表示rune,注意用右括号作为key
    stack:=make([]rune,0)
    for _,v:=range s{
        switch v {
            case &#39;(&#39;,&#39;[&#39;,&#39;{&#39;:
                stack = append(stack,v)
            case &#39;)&#39;,&#39;]&#39;,&#39;}&#39;:
                if len(stack)==0 || stack[len(stack)-1] != m[v] {
                    return false
                }
                stack = stack[:len(stack)-1]
        }
    }
    return len(stack)==0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def isValid(self, s: str) -&amp;gt; bool:
        if s==&amp;quot;&amp;quot;: return True
        if len(s)%2!=0: return False
        dic = {&#39;}&#39;: &#39;{&#39;, &#39;]&#39;: &#39;[&#39;, &#39;)&#39;: &#39;(&#39;}
        stack = []
        for v in s:
            if v==&#39;(&#39; or v==&#39;{&#39; or v==&#39;[&#39;: 
                stack.append(v)
            elif len(stack) ==0 or stack[len(stack)-1] != dic[v]:
                return False
            else: 
                stack=stack[:len(stack)-1]
        return len(stack)==0&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-20.valid-parentheses/ - </description>
        </item>
    
    
    
        <item>
        <title>141.Linked List Cycle</title>
        <link>https://arboat.github.io/posts/leetcode-141.linked-list-cycle/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-141.linked-list-cycle/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-141.linked-list-cycle/ -&lt;h1 id=&#34;快慢指针&#34;&gt;快慢指针&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func hasCycle(head *ListNode) bool {
    if head == nil || head.Next == nil {
        return false
    }
    slow:=head
    fast:=head.Next
    for slow != fast {
        if fast ==nil || fast.Next == nil {
            return false
        }
        slow=slow.Next
        fast=fast.Next.Next
    }
    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def hasCycle(self, head: ListNode) -&amp;gt; bool:
        if head == None or head.next == None: return False
        slow, fast = head,head.next
        while slow != fast:
            if fast == None or fast.next == None: return False
            slow = slow.next
            fast = fast.next.next
        return True
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;哈希表记录法&#34;&gt;哈希表记录法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func hasCycle(head *ListNode) bool {
    m:=make(map[*ListNode]bool,0)
    for head != nil {
        if _,ok:=m[head];ok{
            return true
        }
        m[head]=true
        head=head.Next
    }
    return false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def hasCycle(self, head: ListNode) -&amp;gt; bool:
        s=set()  # set 声明方式， []:list ,():tuple,{}:dict
        while head != None:
            if head in s: return True
            s.add(head)
            head =head.next
        return False
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-141.linked-list-cycle/ - </description>
        </item>
    
    
    
        <item>
        <title>155.Min Stack</title>
        <link>https://arboat.github.io/posts/leetcode-155.min-stack/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-155.min-stack/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-155.min-stack/ -&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问清空栈操作&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;辅助栈-注意相等时也压入辅助栈&#34;&gt;辅助栈 注意相等时也压入辅助栈&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MinStack struct {
    stack []int
    min []int
}


/** initialize your data structure here. */
func Constructor() MinStack {
    return MinStack{}
}


func (this *MinStack) Push(x int)  {
    this.stack = append(this.stack,x)
    if len(this.min)==0{
        this.min = append(this.min,x)
    } else {
        if this.min[len(this.min)-1]&amp;gt;=x {   // 等于很重要
            this.min = append(this.min,x)
        }
    }
}


func (this *MinStack) Pop()  {
    if this.stack[len(this.stack)-1] == this.min[len(this.min)-1]{
        this.min = this.min[:len(this.min)-1]
    }
    this.stack=this.stack[:len(this.stack)-1]
}


func (this *MinStack) Top() int {
    return this.stack[len(this.stack)-1]
}


func (this *MinStack) GetMin() int {
    return this.min[len(this.min)-1]
}


/**
* Your MinStack object will be instantiated and called as such:
* obj := Constructor();
* obj.Push(x);
* obj.Pop();
* param_3 := obj.Top();
* param_4 := obj.GetMin();
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MinStack:

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        initialize your data structure here.
        &amp;quot;&amp;quot;&amp;quot;
        self.stack=[]
        self.minStack=[]


    def push(self, x: int) -&amp;gt; None:
        self.stack.append(x)
        if len(self.minStack)==0:
            self.minStack.append(x)
        else:
            if self.minStack[-1]&amp;gt;=x:
                self.minStack.append(x)

    def pop(self) -&amp;gt; None:
        if self.minStack[-1] == self.stack[-1]:
            self.minStack.pop()
        self.stack.pop()

    def top(self) -&amp;gt; int:
        return self.stack[-1]

    def getMin(self) -&amp;gt; int:
        return self.minStack[-1]



# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;用辅助数字存差到stack&#34;&gt;用辅助数字，存差到stack：&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MinStack struct {
    stack []int
    min int
}


/** initialize your data structure here. */
func Constructor() MinStack {
    return MinStack{}
}

func (this *MinStack) Push(x int)  {
    if len(this.stack) == 0{
        this.stack = append(this.stack,0)
        this.min = x
    } else {
        this.stack = append(this.stack,x-this.min)
        if x&amp;lt;this.min{
            this.min = x
        }
    }
}


func (this *MinStack) Pop() {
    if this.stack[len(this.stack)-1] &amp;lt; 0 {
        this.min = this.min - this.stack[len(this.stack)-1]
    }
    this.stack=this.stack[:len(this.stack)-1]
}


func (this *MinStack) Top() int {
    top:=this.stack[len(this.stack)-1]
    if top &amp;lt;0 {
        return this.min
    } else {
        return this.min + top
    }
}


func (this *MinStack) GetMin() int {
    return this.min
}


/**
* Your MinStack object will be instantiated and called as such:
* obj := Constructor();
* obj.Push(x);
* obj.Pop();
* param_3 := obj.Top();
* param_4 := obj.GetMin();
*/&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-155.min-stack/ - </description>
        </item>
    
    
    
        <item>
        <title>239.Sliding Window Maximum</title>
        <link>https://arboat.github.io/posts/leetcode-239.sliding-window-maximum/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-239.sliding-window-maximum/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-239.sliding-window-maximum/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;p&gt;有 n-k+1个滑动窗口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(nk)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(n-k+1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;deque&#34;&gt;deque&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func maxSlidingWindow(nums []int, k int) []int {
    if nums == nil {
        return []int{}
    }
    //window 是一个维护当前最大值下表的deque
    window, res:= make([]int,0), make([]int,0)
    for i,v:= range nums {
        //  保证window长度，从左弹
        if i&amp;gt;=k &amp;amp;&amp;amp; window[0]&amp;lt;= i-k {
            window = window[1:]
        }
        // 保证window[0]存最大，从右弹
        for len(window)&amp;gt;0 &amp;amp;&amp;amp; nums[window[len(window)-1]] &amp;lt;= v{
            window = window[:len(window)-1]
        }
        window = append(window,i)
        第一个窗口
        if i &amp;gt;= k-1 {
            res = append(res, nums[window[0]])
        }
    }
    return res
}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-239.sliding-window-maximum/ - </description>
        </item>
    
    
    
        <item>
        <title>42.Trapping Rain Water</title>
        <link>https://arboat.github.io/posts/leetcode-42.trapping-rain-water/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-42.trapping-rain-water/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-42.trapping-rain-water/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n^2)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历所有高度， 以高度求最大矩形&lt;/p&gt;
&lt;h1 id=&#34;单调栈-递减&#34;&gt;单调栈 递减&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func trap(height []int) int {
    res:=0
    q:=make([]int,0)
    for i:=0;i&amp;lt;len(height);i++{
        for len(q)&amp;gt;0 &amp;amp;&amp;amp; height[q[len(q)-1]]&amp;lt;height[i]{
            temp:=height[q[len(q)-1]]
            q=q[:len(q)-1]
            if len(q)&amp;gt;0{
                h:= min(height[q[len(q)-1]],height[i])-temp
                w:= i - q[len(q)-1] - 1
                res+=h*w
            }
        }
        q=append(q,i)
    }
    return res
}

func min(x,y int) int {
    if x&amp;lt;y {
        return x
    }
    return y
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;双指针&#34;&gt;双指针&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func trap(height []int) int {
    left,right:=0,len(height)-1
    leftmax,rightmax:=0,0
    res:=0
    for left&amp;lt;=right{
        if leftmax&amp;lt;rightmax{
            if height[left]&amp;gt;leftmax{
                leftmax = height[left]
            } else {
                res += leftmax - height[left]
            }
            left++
        } else {
            if height[right]&amp;gt; rightmax {
                rightmax = height[right]
            } else {
                res+= rightmax - height[right]
            }
            right--
        }
    }
    return res
}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-42.trapping-rain-water/ - </description>
        </item>
    
    
    
        <item>
        <title>641.Design Circular Deque</title>
        <link>https://arboat.github.io/posts/leetcode-641.design-circular-deque/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-641.design-circular-deque/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-641.design-circular-deque/ -&lt;h1 id=&#34;front指针指向第一个rear指针指向最后一个下一位&#34;&gt;front指针指向第一个，rear指针指向最后一个下一位&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MyCircularDeque struct {
    data []int //data容量为实际长度+1
    front int  //指向队列头部第 1 个有效数据的位置
    rear int  //指向队列尾部（即最后 1 个有效数据）的下一个位置，即下一个从队尾入队元素的位置。
}


/** Initialize your data structure here. Set the size of the deque to be k. */
func Constructor(k int) MyCircularDeque {
    return MyCircularDeque {
        data: make([]int,k+1,k+1), //rear指向下一个位置所谓data+1
        front:0,
        rear:0,
    }
}


/** Adds an item at the front of Deque. Return true if the operation is successful. */
func (this *MyCircularDeque) InsertFront(value int) bool {
    if this.IsFull(){
        return false
    }
    //循环左移
    this.front = (len(this.data)+this.front-1)%len(this.data)
    this.data[this.front]=value
    //先移动，在赋值
    return true
}


/** Adds an item at the rear of Deque. Return true if the operation is successful. */
func (this *MyCircularDeque) InsertLast(value int) bool {
    if this.IsFull(){
        return false
    }
    this.data[this.rear]=value
    this.rear = (this.rear+1)%len(this.data)
    //先赋值，再右移动
    return true
}


/** Deletes an item from the front of Deque. Return true if the operation is successful. */
func (this *MyCircularDeque) DeleteFront() bool {
    if this.IsEmpty(){
        return false
    }
    //右移动
    this.front = (this.front+1)%len(this.data)
    return true
}


/** Deletes an item from the rear of Deque. Return true if the operation is successful. */
func (this *MyCircularDeque) DeleteLast() bool {
    if this.IsEmpty(){
        return false
    }
    //左移动
    this.rear = (len(this.data)+this.rear-1)%len(this.data)
    return true
}


/** Get the front item from the deque. */
func (this *MyCircularDeque) GetFront() int {
    if this.IsEmpty(){
        return -1
    }
    return this.data[this.front]
}


/** Get the last item from the deque. */
func (this *MyCircularDeque) GetRear() int {
    if this.IsEmpty(){
        return -1
    }
    return this.data[(len(this.data)+this.rear-1)%len(this.data)]
    // 注意要循环左移一位，rear值为rear前一位
}


/** Checks whether the circular deque is empty or not. */
func (this *MyCircularDeque) IsEmpty() bool {
    return this.front == this.rear
}


/** Checks whether the circular deque is full or not. */
func (this *MyCircularDeque) IsFull() bool {
    return (this.rear+1)%len(this.data)==this.front 
    //当 rear 循环到数组的前面，要从后面追上 front，还差一格的时候，判定队列为满
}


/**
* Your MyCircularDeque object will be instantiated and called as such:
* obj := Constructor(k);
* param_1 := obj.InsertFront(value);
* param_2 := obj.InsertLast(value);
* param_3 := obj.DeleteFront();
* param_4 := obj.DeleteLast();
* param_5 := obj.GetFront();
* param_6 := obj.GetRear();
* param_7 := obj.IsEmpty();
* param_8 := obj.IsFull();
*/&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-641.design-circular-deque/ - </description>
        </item>
    
    
    
        <item>
        <title>84.Largest Rectangle in Histogram</title>
        <link>https://arboat.github.io/posts/leetcode-142.linked-list-cycle-ii/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-142.linked-list-cycle-ii/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-142.linked-list-cycle-ii/ -&lt;h1 id=&#34;快慢指针&#34;&gt;快慢指针&lt;/h1&gt;
&lt;p&gt;2(F+a)=F+a+b+a -&amp;gt; F=b&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func detectCycle(head *ListNode) *ListNode {
    slow,fast:=head,head
    for {
        if fast==nil || fast.Next ==nil {
            return nil
        }
        slow = slow.Next
        fast = fast.Next.Next
        if slow == fast {
            break
        }
    }
    for head != slow {
        head = head.Next
        slow = slow.Next
    }
    return head
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def detectCycle(self, head: ListNode) -&amp;gt; ListNode:
        slow, fast = head, head
        while True:
            if fast == None or fast.next == None: return None
            slow = slow.next
            fast = fast.next.next
            if fast == slow: break
        while head != slow:
            head = head.next
            slow = slow.next
        return head
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;哈希表记录法&#34;&gt;哈希表记录法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func detectCycle(head *ListNode) *ListNode {
    m:=make(map[*ListNode]bool)
    for head != nil {
        if _, ok := m[head]; ok{
            return head
        }
        m[head] = true
        head = head.Next
    }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def detectCycle(self, head: ListNode) -&amp;gt; ListNode:
        s =set()
        while head != None:
            if head in s: return head
            s.add(head)
            head=head.next
        return None
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-142.linked-list-cycle-ii/ - </description>
        </item>
    
    
    
        <item>
        <title>84.Largest Rectangle in Histogram</title>
        <link>https://arboat.github.io/posts/leetcode-84.largest-rectangle-in-histogram/</link>
        <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-84.largest-rectangle-in-histogram/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-84.largest-rectangle-in-histogram/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n^2)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历所有高度， 以高度求最大矩形&lt;/p&gt;
&lt;h1 id=&#34;单调栈-用栈以空间换时间&#34;&gt;单调栈 用栈以空间换时间&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左右分别遍历&lt;/p&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func largestRectangleArea(heights []int) int {
    n:=len(heights)
    left, right := make([]int,n), make([]int, n)
    stack:= make([]int,0)
    for i:=0;i&amp;lt;n;i++ {
        for len(stack) &amp;gt;0 &amp;amp;&amp;amp; heights[stack[len(stack)-1]] &amp;gt;= heights[i]{
            stack = stack[:len(stack)-1]
        }
        if len(stack) == 0{
            left[i] = -1
        } else {
            left[i] = stack[len(stack)-1]
        }
        stack = append(stack,i)
    }
    stack= make([]int,0)
    for i:=n-1; i&amp;gt;=0; i-- {
        for len(stack) &amp;gt;0 &amp;amp;&amp;amp; heights[stack[len(stack)-1]] &amp;gt;= heights[i]{
            stack = stack[:len(stack)-1]
        }
        if len(stack) == 0{
            right[i] = n
        } else {
            right[i] = stack[len(stack)-1]
        }
        stack = append(stack,i)
    }
    result:=0
    for i:=0;i&amp;lt;n;i++ {
        result = max(result,(right[i]-left[i]-1)*heights[i])
    }
    return result
}

func max(x, y int) int {
    if x &amp;gt; y {
        return x
    } 
    return y
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;单调栈一遍遍历&#34;&gt;单调栈，一遍遍历&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func largestRectangleArea(heights []int) int {
    n:=len(heights)
    left, right := make([]int,n), make([]int, n)
    stack:= make([]int,0)
    for i:=0;i&amp;lt;n;i++ {
        right[i]=n
    }
    for i:=0;i&amp;lt;n;i++{
        for len(stack)&amp;gt;0 &amp;amp;&amp;amp; heights[stack[len(stack)-1]] &amp;gt;= heights[i] {
            right[stack[len(stack)-1]] = i
            stack = stack[:len(stack)-1]
        }
        if len(stack) == 0{
            left[i]=-1
        } else {
            left[i]=stack[len(stack)-1]
        }
        stack = append(stack,i)
    }
    result:=0
    for i:=0;i&amp;lt;n;i++{
        result = max(result,(right[i]-left[i]-1)*heights[i])
    }
    return result
}

func max(x, y int) int {
    if x &amp;gt; y {
        return x
    } 
    return y
}
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-84.largest-rectangle-in-histogram/ - </description>
        </item>
    
    
    
        <item>
        <title>283.Move Zeroes</title>
        <link>https://arboat.github.io/posts/leetcode-283.move-zeroes/</link>
        <pubDate>Fri, 01 May 2020 00:00:06 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-283.move-zeroes/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-283.move-zeroes/ -&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;两次遍历&#34;&gt;两次遍历：&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func moveZeroes(nums []int)  {
    // if nums == nil { 
    //     return
    //  }
    i,j:=0,0
    for i=0;i&amp;lt;len(nums);i++{
        if nums[i]!=0{
            nums[j]=nums[i]
            j++
        }
    }
    //j为第一个零位置, 遍历为0
    for ;j&amp;lt;len(nums);j++{
        nums[j]=0
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def moveZeroes(self, nums: List[int]) -&amp;gt; None:
        &amp;quot;&amp;quot;&amp;quot;
        Do not return anything, modify nums in-place instead.
        &amp;quot;&amp;quot;&amp;quot;
        i,j=0,0
        while i&amp;lt;len(nums):
            if nums[i] != 0:
                nums[j]=nums[i]
                j+=1
            i+=1
        while j&amp;lt; len(nums):
            nums[j]=0
            j+=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;双指针一次遍历-复制到第一个零的位置并置零&#34;&gt;双指针一次遍历 复制到第一个零的位置，并置零&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func moveZeroes(nums []int)  {
    if nums == nil || len(nums)==0 {
        return
    }
    j:=0
    for i:=0;i&amp;lt;len(nums);i++{
        if nums[i]!=0{
            if i &amp;gt;j {
                nums[j] = nums[i]
                nums[i] = 0
            }
            j++
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def moveZeroes(self, nums):
        &amp;quot;&amp;quot;&amp;quot;
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        &amp;quot;&amp;quot;&amp;quot;
        i,j=0,0
        while i&amp;lt;len(nums):
            if nums[i]!=0:
                if i&amp;gt;j:
                    nums[j]=nums[i]
                    nums[i]=0
                j+=1
            i+=1&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-283.move-zeroes/ - </description>
        </item>
    
    
  </channel>
</rss> 