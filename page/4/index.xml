<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArBlog</title>
    <link>https://blog.arboat.top/</link>
    <description>Recent content on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2020 00:05:00 +0800</lastBuildDate>
    
        <atom:link href="https://blog.arboat.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>66.Plus One</title>
        <link>https://blog.arboat.top/posts/leetcode-66.plus-one/</link>
        <pubDate>Fri, 01 May 2020 00:00:06 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-66.plus-one/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-66.plus-one/ -&lt;ul&gt;
&lt;li&gt;时间复杂度:O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度:O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;转数字1再转成数组&#34;&gt;转数字+1再转成数组&lt;/h1&gt;
&lt;h1 id=&#34;迭代&#34;&gt;迭代：&lt;/h1&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 判断最后位是不是9，不是直接加一返回，是的话加向前遍历；
// 遍历正常推出，那么 第一位加一个1
func plusOne(digits []int) []int {
    for i:=len(digits)-1;i&amp;gt;=0;i--{ //注意最后一个index
        if digits[i]!=9{
            digits[i]++
            return digits
        } else {
            digits[i]=0
        }
    }
    return append([]int{1},digits...)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def plusOne(self, digits):
        &amp;quot;&amp;quot;&amp;quot;
        :type digits: List[int]
        :rtype: List[int]
        &amp;quot;&amp;quot;&amp;quot;
        i=len(digits)-1
        while i&amp;gt;=0:
            if digits[i]!=9:
                digits[i]+=1
                return digits
            else:
                digits[i]=0
            i-=1
        digits.insert(0, 1)
        return digits
&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-66.plus-one/ - </description>
        </item>
    
    
    
        <item>
        <title>169.Majority Element</title>
        <link>https://blog.arboat.top/posts/leetcode-169.majority-element/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-169.majority-element/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-169.majority-element/ -&lt;p&gt;排序取中位数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O((nlogn)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func majorityElement(nums []int) int {
    sort.Ints(nums)
    return nums[len(nums)/2]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分治:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O((nlogn)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;func majorityElement(nums []int) int {
return record(nums,0,len(nums)-1)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;func countInSlice(nums []int, num, low, high int) int {
count:=0
for i:=low;i&amp;lt;=high;i++{
if nums[i] == num {
count++
}
}
return count
}
func record(nums []int, low, high int) int {
if low == high {
return nums[low]
}
mid:=(high-low)/2 + low
left:=record(nums,low,mid)
right:=record(nums,mid+1,high)
if left == right {
return left
}
leftCount:=countInSlice(nums,left,low,high)
rightCount:=countInSlice(nums,right,low,high)
if leftCount &amp;gt; rightCount {
return left
}
return right
}&lt;/p&gt;
- https://blog.arboat.top/posts/leetcode-169.majority-element/ - </description>
        </item>
    
    
    
        <item>
        <title>17.Letter Combinations of a Phone Number</title>
        <link>https://blog.arboat.top/posts/leetcode-17.letter-combinations-of-a-phone-number/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-17.letter-combinations-of-a-phone-number/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-17.letter-combinations-of-a-phone-number/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m 是输入中对应 3 个字母的数字个数，n 是输入中对应 4 个字母的数字个数&lt;/li&gt;
&lt;li&gt;时间复杂度：O((3^m+4^n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(m+n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var phoneMap = map[string]string {
    &amp;quot;2&amp;quot;: &amp;quot;abc&amp;quot;,
    &amp;quot;3&amp;quot;: &amp;quot;def&amp;quot;,
    &amp;quot;4&amp;quot;: &amp;quot;ghi&amp;quot;,
    &amp;quot;5&amp;quot;: &amp;quot;jkl&amp;quot;,
    &amp;quot;6&amp;quot;: &amp;quot;mno&amp;quot;,
    &amp;quot;7&amp;quot;: &amp;quot;pqrs&amp;quot;,
    &amp;quot;8&amp;quot;: &amp;quot;tuv&amp;quot;,
    &amp;quot;9&amp;quot;: &amp;quot;wxyz&amp;quot;,
}

func letterCombinations(digits string) []string {
    res :=[]string{}
    // 特殊情况
    if len(digits) == 0 {
        return res
    }
    var backTrack func(path string, cur int)
    backTrack = func(path string, cur int) {
        if cur == len(digits) {
            res = append(res,path)
            return 
        }
        // string index 的值要在string
        digit:=string(digits[cur])
        letters:=phoneMap[digit]
        for _,v:=range letters{
            path = path + string(v)
            backTrack(path,cur+1)
            path = path[:len(path)-1]
        }
    }
    backTrack(&amp;quot;&amp;quot;,0)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-17.letter-combinations-of-a-phone-number/ - </description>
        </item>
    
    
    
        <item>
        <title>46.Permutations</title>
        <link>https://blog.arboat.top/posts/leetcode-46.permutations/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-46.permutations/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-46.permutations/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O((n*n!)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n*n!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func permute(nums []int) [][]int {
    res := [][]int{}
    item := []int{}
    used := make([]bool,len(nums))
    var backtrack func([]int,[]int,[]bool)
    backtrack = func(item, nums[]int, used[]bool){
        if len(item) == len(nums) {
            tmp:= make([]int,len(item))
            copy(tmp,item)
            res = append(res,tmp)
        }
        for i,v:=range nums {
            if !used[i]{
                //yes
                used[i] = true
                item = append(item,v)
                //back
                backtrack(item,nums,used)
                //no
                item = item[:len(item)-1]
                used[i] = false
            }
        }
    }
    backtrack(item,nums,used)
    return res
}&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-46.permutations/ - </description>
        </item>
    
    
    
        <item>
        <title>47.Permutations II</title>
        <link>https://blog.arboat.top/posts/leetcode-47.permutations-ii/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-47.permutations-ii/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-47.permutations-ii/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O((n*n!)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n*n!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func permuteUnique(nums []int) [][]int {
res := [][]int{}
    item := []int{}
    used := make([]bool,len(nums))
    sort.Ints(nums)
    var backtrack func([]int,[]int,[]bool)
    backtrack = func(item, nums[]int, used[]bool){
        if len(item) == len(nums) {
            tmp:= make([]int,len(item))
            copy(tmp,item)
            res = append(res,tmp)
        }
        for i,v:=range nums {
            if !used[i]{
                //剪枝 !更彻底，顺序
                if i&amp;gt;0 &amp;amp;&amp;amp; v == nums[i-1] &amp;amp;&amp;amp; !used[i-1] {
                //if i&amp;gt;0 &amp;amp;&amp;amp; v == nums[i-1] &amp;amp;&amp;amp; used[i-1] {
                    continue
                }
                //yes
                used[i] = true
                item = append(item,v)
                //back
                backtrack(item,nums,used)
                //no
                item = item[:len(item)-1]
                used[i] = false
            }
        }
    }
    backtrack(item,nums,used)
    return res
}&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-47.permutations-ii/ - </description>
        </item>
    
    
    
        <item>
        <title>50.Pow(x, n)</title>
        <link>https://blog.arboat.top/posts/leetcode-50.powx-n/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-50.powx-n/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-50.powx-n/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度O(logn)&lt;/li&gt;
&lt;li&gt;空间复杂度O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func myPow(x float64, n int) float64 {
    if n &amp;gt;= 0 {
        return dealer(x,n)
    }
    return 1.0/dealer(x,-n)
}

func dealer(x float64, n int) float64 {
    if n == 0 {
        return 1
    }
    temp := dealer(x,n/2)
    if n%2 == 0 {
        return temp*temp
    }
    return temp * temp * x
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;迭代&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度O(logn)&lt;/li&gt;
&lt;li&gt;空间复杂度O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func myPow(x float64, n int) float64 {
    if n &amp;gt;= 0 {
        return dealer(x,n)
    }
    return 1.0/dealer(x,-n)
}

func dealer(x float64, n int) float64 {
    res:=1.0
    temp:=x
    for n &amp;gt; 0 {
        if n%2 == 1 {
            res *=temp
        }
        temp *= temp
        n /=2
    }
    return res
}&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-50.powx-n/ - </description>
        </item>
    
    
    
        <item>
        <title>51.N-Queens</title>
        <link>https://blog.arboat.top/posts/leetcode-51.n-queens/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-51.n-queens/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-51.n-queens/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度O(N!)&lt;/li&gt;
&lt;li&gt;空间复杂度O(N)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func solveNQueens(n int) [][]string {
    res:=[][]string{}
    queens:=make([]int,n)
    for i:=range queens {
        queens[i] = -1
    }
    c,d1,d2:=map[int]bool{},map[int]bool{},map[int]bool{}
    var backTrack func(queens[]int,row int,c,d1,d2 map[int]bool)
    backTrack = func(queens[]int,row int,c,d1,d2 map[int]bool){
        if row == n{
            solution:=generate(queens,n)
            res = append(res,solution)
            return
        }
        for i:=0;i&amp;lt;n;i++{
            if c[i] || d1[row-i] || d2[row+i] {
                continue
            }
            queens[row]=i
            c[i], d1[row-i], d2[row+i] = true, true, true
            backTrack(queens,row+1,c,d1,d2)
            queens[row]=-1
            delete(c,i)
            delete(d1,row-i)
            delete(d2,row+i)
        }
    }
    backTrack(queens,0,c,d1,d2)
    return res
}
func generate(queens[]int, n int) []string {
    solution:=[]string{}
    for i:=0;i&amp;lt;n;i++{
        row:=make([]byte,n)
        for j:=0;j&amp;lt;n;j++{
            row[j]=&#39;.&#39;
        }
        row[queens[i]] = &#39;Q&#39; 
        solution = append(solution,string(row))
    }
    return solution
}&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-51.n-queens/ - </description>
        </item>
    
    
    
        <item>
        <title>70.Climbing Stairs</title>
        <link>https://blog.arboat.top/posts/leetcode-70.climbing-stairs/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-70.climbing-stairs/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-70.climbing-stairs/ -&lt;p&gt;分析可得本题为Fibonacci sequence&lt;/p&gt;
&lt;p&gt;用通项公式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(log n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用动态规划（滑动数组):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func climbStairs(n int) int {
    p,q,r:=1,1,1
    for i:=2 ; i&amp;lt;=n ;i++ {
        p = q
        q = r
        r = p + q
    }
    return r
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def climbStairs(self, n: int) -&amp;gt; int:
        p,q,r=1,1,1
        i = 2 
        while i&amp;lt;=n:
            p=q
            q=r
            r=p+q
            i+=1
        return r&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-70.climbing-stairs/ - </description>
        </item>
    
    
    
        <item>
        <title>77.Combinations</title>
        <link>https://blog.arboat.top/posts/leetcode-77.combinations/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-77.combinations/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-77.combinations/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(( k
n)×k)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func combine(n int, k int) [][]int {
    res:= [][]int{}
    item:= []int{}
    var dfs func(int)
    dfs = func(cur int) {
        if len(item) + (n-cur+1) &amp;lt; k {
            return
        }
        //copy不会影响原slice
        if len(item) == k {
            temp:=make([]int,k)
            copy(temp,item)
            res = append(res, temp)
            return
        }
        // yes 回溯
        item = append(item, cur)
        dfs(cur+1)
        item = item[:len(item)-1]
        // no
        dfs(cur+1)
    }
    dfs(1)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;回溯法&#34;&gt;回溯法&lt;/h2&gt;
&lt;p&gt;注意剪枝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;result = []
func backtrack(路径，选择列表) {
    if 满足结束条件 {
        result.add(路径)
    }
    return

    for 选择 in 选择列表 {
        做选择
        backtrack(路径，选择列表)
        撤销选择
    }
}




func combine(n int, k int) [][]int {
    res:= [][]int{}
    item:= []int{}
    var dfs func([]int,int)
    dfs = func(item[]int,cur int) {
        if len(item) == k{
            temp :=make([]int, k)
            copy(temp,item)
            res = append(res,temp)
            return
        }
        //减枝
        //len(item) + n- cur +1 &amp;gt;= k 才能继续
        for ;cur&amp;lt;=len(item)+n+1-k;cur++{
            item = append(item,cur)
            dfs(item,cur+1)
            item = item[:len(item)-1]
        }
    }
    dfs(item,1)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-77.combinations/ - </description>
        </item>
    
    
    
        <item>
        <title>78.Subsets</title>
        <link>https://blog.arboat.top/posts/leetcode-78.subsets/</link>
        <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
        
        <guid>https://blog.arboat.top/posts/leetcode-78.subsets/</guid>
        <description>ArBlog https://blog.arboat.top/posts/leetcode-78.subsets/ -&lt;p&gt;递归:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O((N*2^N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*2^N)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func combine(n int, k int) [][]int {
    res:= [][]int{}
    item:= []int{}
    var dfs func(int)
    dfs = func(cur int) {
        if len(item) + (n-cur+1) &amp;lt; k {
            return
        }
        //copy不会影响原slice
        if len(item) == k {
            temp:=make([]int,k)
            copy(temp,item)
            res = append(res, temp)
            return
        }
        // yes 回溯
        item = append(item, cur)
        dfs(cur+1)
        item = item[:len(item)-1]
        // no
        dfs(cur+1)
    }
    dfs(1)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;回溯法&#34;&gt;回溯法&lt;/h2&gt;
&lt;p&gt;注意剪枝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;result = []
func backtrack(路径，选择列表) {
    if 满足结束条件 {
        result.add(路径)
    }
    return

    for 选择 in 选择列表 {
        做选择
        backtrack(路径，选择列表)
        撤销选择
    }
}




func combine(n int, k int) [][]int {
    res:= [][]int{}
    item:= []int{}
    var dfs func([]int,int)
    dfs = func(item[]int,cur int) {
        if len(item) == k{
            temp :=make([]int, k)
            copy(temp,item)
            res = append(res,temp)
            return
        }
        //减枝
        //len(item) + n- cur +1 &amp;gt;= k 才能继续
        for ;cur&amp;lt;=len(item)+n+1-k;cur++{
            item = append(item,cur)
            dfs(item,cur+1)
            item = item[:len(item)-1]
        }
    }
    dfs(item,1)
    return res
}
&lt;/code&gt;&lt;/pre&gt;
- https://blog.arboat.top/posts/leetcode-78.subsets/ - </description>
        </item>
    
    
  </channel>
</rss> 