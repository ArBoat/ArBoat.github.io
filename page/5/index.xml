<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArBlog</title>
    <link>https://arboat.github.io/</link>
    <description>Recent content on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2020 00:05:00 +0800</lastBuildDate>
    
        <atom:link href="https://arboat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>11.ContainerWIthMostWater</title>
        <link>https://arboat.github.io/posts/leetcode-11.containerwithmostwater/</link>
        <pubDate>Fri, 01 May 2020 00:00:01 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-11.containerwithmostwater/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-11.containerwithmostwater/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(N^2)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    func maxArea(height []int) int {
      max:=0
      for i:=0;i&amp;lt;len(height)-1;i++{
        for j:=i+1;j&amp;lt;len(height);j++{
          area:= (j-i)*int(math.Min(float64(height[i]),float64(height[j])))
          max=int(math.Max(float64(area),float64(max)))
        }
      }
      return max
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def maxArea(self, height: List[int]) -&amp;gt; int:
        a = 0
        for i in range(len(height)-1):
            for j in range(i+1,len(height)):
                area = (j-i) * min(height[i],height[j])
                a = max(a,area)
        return a
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;双指针&#34;&gt;双指针&lt;/h1&gt;
&lt;p&gt;两侧向中间逼近，每次移动小的
时间复杂度 O(N)
空间复杂度 O(1)&lt;/p&gt;
&lt;p&gt;Go:
go 中math.Max,Min,Abs 都是float64， int要自己写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func maxArea(height []int) int {
    max:=0
    i,j:=0,len(height)-1
    for i!=j {
        area:= (j-i)*min(height[i],height[j])
        if area &amp;gt; max {
            max = area
        }
        if height[i] &amp;gt; height[j] {
            j--
        } else {
            i++
        }
    }
    return max
}

func min(a,b int) int {
    if a &amp;gt;= b {
        return b
    } else {
        return a
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;python：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def maxArea(self, height: List[int]) -&amp;gt; int:
        m = 0
        i, j= 0, len(height)-1
        while i!=j:
            area=(j-i)*min(height[i],height[j])
            m=max(area,m)
            if height[i] &amp;gt; height[j]:
                j-=1
            else:
                i+=1
        return m
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-11.containerwithmostwater/ - </description>
        </item>
    
    
    
        <item>
        <title>1.Two Sum</title>
        <link>https://arboat.github.io/posts/leetcode-1.two-sum.md/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-1.two-sum.md/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-1.two-sum.md/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n^2)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func twoSum(nums []int, target int) []int {
    for i:=0;i&amp;lt;len(nums)-1;i++{
    for j:=i+1;j&amp;lt;len(nums);j++{
        if nums[j]+nums[i]==target {
            return []int{i,j}
        }
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;哈希表&#34;&gt;哈希表&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func twoSum(nums []int, target int) []int {
    m:=make(map[int]int)          // nums 的v作为map的k，k作为map的v
    for k1,v1 := range nums {
        v2:=target - v1
        if _,ok := m[v2]; ok {
            return []int{m[v2],k1}  //已存在的是已经先存入map的，所以在前
        }
        m[v1] = k1
    }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def twoSum(self, nums, target):
        &amp;quot;&amp;quot;&amp;quot;
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        &amp;quot;&amp;quot;&amp;quot;
        dic = {}
        for k1,v1 in enumerate(nums):  // k,v 遍历
            v2 = target - v1
            if v2 in dic:
                return [dic[v2],k1]
            dic[v1]=k1
        return {}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-1.two-sum.md/ - </description>
        </item>
    
    
    
        <item>
        <title>15.Three Sum</title>
        <link>https://arboat.github.io/posts/leetcode-15.three-sum.md/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-15.three-sum.md/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-15.three-sum.md/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n^3)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func threeSum(nums []int) [][]int {
    r:=make([][]int, 0)
    for i:=0 ; i &amp;lt; len(nums)-2 ; i++ {
        for j:=i+1; j&amp;lt;len(nums)-1; j++ {
            for k:= j+1; k&amp;lt;len(nums);k++ {
                if nums[i]+nums[j]+nums[k]=0 {
                    r = append(r, []int{nums[i],nums[j],nums[j]})
                }
            }
        }
    }
    return r
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]:
     res = []
     for i in range(0,len(nums)-2):
         for j in range(i+1,len(nums)-1):
             for k in range(j+1,len(nums)):
             if nums[i]+nums[j]+nums[k] = 0:
                res.append([nums[i],nums[j],nums[j]])
     return res
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;双指针&#34;&gt;双指针&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n^2)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先排序，把一指针k固定在最左端，另外两个i,j向中间逼近，三个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nums[k]&amp;gt;0,说明nums[i],nums[j]也一定大于0，三数只和一定大于0，为终止条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k&amp;gt;0且nums[k] == nums[k-1],说明有重复元素，continue此次循环, k=0时为第一个元素，必然不会重复
3.判断三者之和：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 1.&amp;lt;0: i++ ,并且要过滤nums[i]==nums[i-1]，跳过，i++
 2.&amp;gt;0: j-- ,并且要过滤nums[j]==nums[j+1]，跳过，j--
 3.=0: append, i++ j--,因为已经相等,并且要过滤nums[i]==nums[i-1]，跳过，i++;j-- ,并且要过滤nums[j]==nums[j+1]，跳过，j--
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func threeSum(nums []int) [][]int {
    res:=make([][]int,0)
    sort.Ints(nums)
    for k:=0 ; k&amp;lt; len(nums)-2; k++ {
        i,j:=k+1,len(nums)-1
        if nums[k] &amp;gt; 0 {break}
        if k&amp;gt;0 &amp;amp;&amp;amp; nums [k] == nums [k-1] {continue}
        for i&amp;lt;j {
            s:= nums[k]+nums[i]+nums[j]
            if s&amp;lt;0 {
                i++
                for i&amp;lt;j &amp;amp;&amp;amp; nums[i]==nums[i-1]{i++}
            } else if s&amp;gt;0 {
                j--
                for i&amp;lt;j &amp;amp;&amp;amp; nums[j]== nums[j+1]{j--}
            } else{
                res=append(res,[]int{nums[k],nums[i],nums[j]})
                i++
                j--
                for i&amp;lt;j &amp;amp;&amp;amp; nums[i]==nums[i-1]{i++}
                for i&amp;lt;j &amp;amp;&amp;amp; nums[j]== nums[j+1]{j--}
            }
        }
    }
    return res
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; class Solution:
     def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]:
         nums.sort()
         res = []
         for k in range(len(nums)-2):
             if nums[k]&amp;gt;0: break           
             if k &amp;gt; 0 and nums[k] == nums[k-1]: continue
             i, j = k+1,len(nums)-1
             while i&amp;lt;j:
                 s = nums[k] + nums[i] + nums[j]
                 if s&amp;lt;0:
                     i+=1
                     while i&amp;lt;j and nums[i] == nums[i-1]:i+=1
                 elif s&amp;gt;0:
                     j-=1
                     while i&amp;lt;j and nums[j] == nums[j+1]:j-=1
                 else:
                     res.append([nums[k],nums[i],nums[j]])
                     i+=1
                     j-=1
                     while i&amp;lt;j and nums[i] == nums[i-1]:i+=1
                     while i&amp;lt;j and nums[j] == nums[j+1]:j-=1
         return res    
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-15.three-sum.md/ - </description>
        </item>
    
    
    
        <item>
        <title>189. Rotate Array</title>
        <link>https://arboat.github.io/posts/leetcode-189.-rotate-array/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-189.-rotate-array/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-189.-rotate-array/ -&lt;h1 id=&#34;暴力法&#34;&gt;暴力法&lt;/h1&gt;
&lt;p&gt;时间复杂度O(n*k),空间负载度O(1)&lt;/p&gt;
&lt;h1 id=&#34;额外数组法&#34;&gt;额外数组法&lt;/h1&gt;
&lt;p&gt;下标为 i 的我们把它放到 (i+k)%数组长度 的位置。然后把新的数组拷贝到原数组中。&lt;/p&gt;
&lt;p&gt;时空间复杂福 O（n）&lt;/p&gt;
&lt;h1 id=&#34;3次反转法&#34;&gt;3次反转法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func rotate(nums []int, k int)  {
    k%=len(nums)
    reverse(nums,0,len(nums)-1)
    reverse(nums,0,k-1)
    reverse(nums,k,len(nums)-1)
}

func reverse(nums[]int,start,end int){
    for start &amp;lt; end {
        temp:= nums[start]
        nums[start]=nums[end]
        nums[end]=temp
        start++
        end--
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def rotate(self, nums, k):
        &amp;quot;&amp;quot;&amp;quot;
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        &amp;quot;&amp;quot;&amp;quot;
        k%=len(nums)
        self.reverse(nums,0,len(nums)-1)
        self.reverse(nums,0,k-1)
        self.reverse(nums,k,len(nums)-1)

    def reverse(self, nums, start, end):
        while start &amp;lt; end:
            temp = nums[start]
            nums[start] = nums[end]
            nums[end] = temp
            start+=1
            end-=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;环状替换&#34;&gt;环状替换：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func rotate(nums []int, k int)  {
    k%=len(nums)
    count:=0
    for i:=0;count&amp;lt;len(nums);i++{
        current:=i
        pre:=nums[i]
        for{
            next:=(current+k)%len(nums)
        temp:=nums[next]
        nums[next] = pre
        pre = temp
        current = next
        count++
        if i == current{
            break
        }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def rotate(self, nums, k):
        &amp;quot;&amp;quot;&amp;quot;
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        &amp;quot;&amp;quot;&amp;quot;
        k%=len(nums)
        count=0
        i=0
        while count &amp;lt; len(nums):
            current = i
            pre = nums[i]
            while True:
                next = (current+k)%len(nums)
                temp = nums[next]
                nums[next] = pre
                pre = temp
                current = next
                count+=1
                if i == current:break
            i+=1&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-189.-rotate-array/ - </description>
        </item>
    
    
    
        <item>
        <title>242.Valid Anagram</title>
        <link>https://arboat.github.io/posts/leetcode-242.valid-anagram/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-242.valid-anagram/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-242.valid-anagram/ -&lt;p&gt;question:
1.大小写
2.完全相同&lt;/p&gt;
&lt;h1 id=&#34;先分别排序再比较&#34;&gt;先分别排序，再比较&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(nlogn)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func isAnagram(s string, t string) bool {
    sByte:=[]byte(s)
    tByte:=[]byte(t)
    if len(sByte) != len(tByte){
        return false
    }
    sort.Slice(sByte,func(i,j int) bool {
        return sByte[i]&amp;lt;sByte[j]
    })
    sort.Slice(tByte,func(i,j int) bool {
        return tByte[i]&amp;lt;tByte[j]
    })
    for i,v:=range sByte{
        if v!=tByte[i] {
            return false
        }
    }
    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def isAnagram(self, s: str, t: str) -&amp;gt; bool:
        return sorted(s) == sorted(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;哈希表&#34;&gt;哈希表&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度 O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func isAnagram(s string, t string) bool {
    if len(s)!=len(t){
        return false
    }
    sByte:=[]byte(s)
    tByte:=[]byte(t)
    m:=make(map[byte]int)
    for i:=range sByte {
        m[sByte[i]]++
        m[tByte[i]]--
    }
    for _,v:=range m{
        if v!=0{
            return false
        }
    }
    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:
//内置collections.Counter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def isAnagram(self, s: str, t: str) -&amp;gt; bool:
        return collections.Counter(s) == collections.Counter(t)
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-242.valid-anagram/ - </description>
        </item>
    
    
    
        <item>
        <title>26. Remove Duplicates from Sorted Array</title>
        <link>https://arboat.github.io/posts/leetcode-26.-remove-duplicates-from-sorted-array/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-26.-remove-duplicates-from-sorted-array/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-26.-remove-duplicates-from-sorted-array/ -&lt;h1 id=&#34;双指针&#34;&gt;双指针&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func removeDuplicates(nums []int) int {
    if len(nums) == 0 {
        return 0
    }
    i,j:=0,1
    for ;j&amp;lt;len(nums);j++{
        if nums[i]!=nums[j]{
            i++
            nums[i]=nums[j]
        }
    }
    return i+1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def removeDuplicates(self, nums: List[int]) -&amp;gt; int:
        if len(nums) == 0: return 0
        i=0
        for j in range(1,len(nums)):
            if nums[i]!=nums[j]:
                i+=1
                nums[i]=nums[j]
        return i+1 &lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-26.-remove-duplicates-from-sorted-array/ - </description>
        </item>
    
    
    
        <item>
        <title>49.Group Anagrams</title>
        <link>https://arboat.github.io/posts/leetcode-49.group-anagrams/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-49.group-anagrams/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-49.group-anagrams/ -&lt;p&gt;question:
1.大小写
2.完全相同&lt;/p&gt;
&lt;h1 id=&#34;先计算每个字符串中数字次数的数组再存入map返回map-value的数组&#34;&gt;先计算每个字符串中数字次数的数组，再存入map，返回map value的数组&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 O(nk),其中 NN 是 strs 的长度，而 KK 是 strs 中字符串的最大长度。计算每个字符串的字符串大小是线性的，我们统计每个字符串&lt;/li&gt;
&lt;li&gt;空间复杂度 O(nk),排序存储在 res 中的全部信息内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func groupAnagrams(strs []string) [][]string {
    m:=make(map[[26]int][]string)
    for _,v:=range strs{
        k:=strKey(v)
        s,ok:=m[k]
        if ok {
            s=append(s,v)  
            // s为copy 需要重新赋值    
            m[k]=s
        } else {
            m[k]=[]string{v}
        }
    }
    res:=make([][]string,0)
    for _,v:=range m{
        res = append(res,v)
    }
    return res
}

func strKey(s string)[26]int{
    res:=[26]int{}
    for _,v:=range s{
        res[v-&#39;a&#39;]++
        //单引号 表示rune 只能一个字符int32
    }
    return res
}&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-49.group-anagrams/ - </description>
        </item>
    
    
    
        <item>
        <title>88.Merge Sorted Array</title>
        <link>https://arboat.github.io/posts/leetcode-88.merge-sorted-array/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
        
        <guid>https://arboat.github.io/posts/leetcode-88.merge-sorted-array/</guid>
        <description>ArBlog https://arboat.github.io/posts/leetcode-88.merge-sorted-array/ -&lt;h1 id=&#34;合并后排序&#34;&gt;合并后排序&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 : O((n+m)log(n+m))。&lt;/li&gt;
&lt;li&gt;空间复杂度 : O(1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;双指针从前往后&#34;&gt;双指针：从前往后：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 : O(n+m)。&lt;/li&gt;
&lt;li&gt;空间复杂度 : O(m)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;双指针从后往前&#34;&gt;双指针：从后往前：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 : O(n+m)。&lt;/li&gt;
&lt;li&gt;空间复杂度 : O(1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func merge(nums1 []int, m int, nums2 []int, n int)  {
    p, p1, p2:= m+n-1,m-1,n-1
    for p1&amp;gt;=0 &amp;amp;&amp;amp; p2&amp;gt;=0 {
        if nums1[p1]&amp;gt;nums2[p2]{
            nums1[p]=nums1[p1]
            p1--
        } else {
            nums1[p]=nums2[p2]
            p2--
        }
        p--
    }
    if p1&amp;lt;0 {
        // nums1[:p2+1]=nums2[:p2+1]  cannot assign to nums1[:p2 + 1]  右值
        for i:=0;i&amp;lt;p2+1;i++{
            nums1[i]=nums2[i]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&amp;gt; None:
        &amp;quot;&amp;quot;&amp;quot;
        Do not return anything, modify nums1 in-place instead.
        &amp;quot;&amp;quot;&amp;quot;
        p, p1, p2 = m+n-1,m-1,n-1
        while p1&amp;gt;=0 and p2 &amp;gt;=0:
            if nums1[p1]&amp;gt;nums2[p2]:
                nums1[p]=nums1[p1]
                p1-=1
            else:
                nums1[p]=nums2[p2]
                p2-=1
            p-=1
			
        if p1 &amp;lt; 0:
            for i in range(0,p2+1):
                nums1[i] = nums2[i]
&lt;/code&gt;&lt;/pre&gt;
- https://arboat.github.io/posts/leetcode-88.merge-sorted-array/ - </description>
        </item>
    
    
  </channel>
</rss> 