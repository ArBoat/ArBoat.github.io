<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on ArBlog</title>
    <link>https://blog.arboat.top/tags/array/</link>
    <description>Recent content in array on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 00:00:06 +0800</lastBuildDate>
    
	<atom:link href="https://blog.arboat.top/tags/array/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>283.Move Zeroes</title>
      <link>https://blog.arboat.top/posts/leetcode-283.move-zeroes/</link>
      <pubDate>Fri, 01 May 2020 00:00:06 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-283.move-zeroes/</guid>
      <description>时间复杂度:O(n) 空间复杂度:O(1)  两次遍历： Go:
func moveZeroes(nums []int) { // if nums == nil { // return // } i,j:=0,0 for i=0;i&amp;lt;len(nums);i++{ if nums[i]!=0{ nums[j]=nums[i] j++ } } //j为第一个零位置, 遍历为0 for ;j&amp;lt;len(nums);j++{ nums[j]=0 } }  Python:
class Solution: def moveZeroes(self, nums: List[int]) -&amp;gt; None: &amp;quot;&amp;quot;&amp;quot; Do not return anything, modify nums in-place instead. &amp;quot;&amp;quot;&amp;quot; i,j=0,0 while i&amp;lt;len(nums): if nums[i] != 0: nums[j]=nums[i] j+=1 i+=1 while j&amp;lt; len(nums): nums[j]=0 j+=1  双指针一次遍历 复制到第一个零的位置，并置零  时间复杂度:O(n) 空间复杂度:O(1)  Go:</description>
    </item>
    
    <item>
      <title>66.Plus One</title>
      <link>https://blog.arboat.top/posts/leetcode-66.plus-one/</link>
      <pubDate>Fri, 01 May 2020 00:00:06 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-66.plus-one/</guid>
      <description> 时间复杂度:O(n) 空间复杂度:O(1)  转数字+1再转成数组 迭代： Go:
// 判断最后位是不是9，不是直接加一返回，是的话加向前遍历； // 遍历正常推出，那么 第一位加一个1 func plusOne(digits []int) []int { for i:=len(digits)-1;i&amp;gt;=0;i--{ //注意最后一个index if digits[i]!=9{ digits[i]++ return digits } else { digits[i]=0 } } return append([]int{1},digits...) }  Python:
class Solution(object): def plusOne(self, digits): &amp;quot;&amp;quot;&amp;quot; :type digits: List[int] :rtype: List[int] &amp;quot;&amp;quot;&amp;quot; i=len(digits)-1 while i&amp;gt;=0: if digits[i]!=9: digits[i]+=1 return digits else: digits[i]=0 i-=1 digits.insert(0, 1) return digits  </description>
    </item>
    
    <item>
      <title>70.Climbing Stairs</title>
      <link>https://blog.arboat.top/posts/leetcode-70.climbing-stairs/</link>
      <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-70.climbing-stairs/</guid>
      <description>分析可得本题为Fibonacci sequence
用通项公式：
 时间复杂度：O(log n) 空间复杂度：O(1)  用动态规划（滑动数组):
 时间复杂度：O(n) 空间复杂度：O(1)  Go:
func climbStairs(n int) int { p,q,r:=1,1,1 for i:=2 ; i&amp;lt;=n ;i++ { p = q q = r r = p + q } return r }  Python:
class Solution: def climbStairs(self, n: int) -&amp;gt; int: p,q,r=1,1,1 i = 2 while i&amp;lt;=n: p=q q=r r=p+q i+=1 return r </description>
    </item>
    
    <item>
      <title>11.ContainerWIthMostWater</title>
      <link>https://blog.arboat.top/posts/leetcode-11.containerwithmostwater/</link>
      <pubDate>Fri, 01 May 2020 00:00:01 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-11.containerwithmostwater/</guid>
      <description>暴力法  时间复杂度 O(N^2) 空间复杂度 O(1)  Go:
 func maxArea(height []int) int { max:=0 for i:=0;i&amp;lt;len(height)-1;i++{ for j:=i+1;j&amp;lt;len(height);j++{ area:= (j-i)*int(math.Min(float64(height[i]),float64(height[j]))) max=int(math.Max(float64(area),float64(max))) } } return max }  python:
class Solution: def maxArea(self, height: List[int]) -&amp;gt; int: a = 0 for i in range(len(height)-1): for j in range(i+1,len(height)): area = (j-i) * min(height[i],height[j]) a = max(a,area) return a  双指针 两侧向中间逼近，每次移动小的 时间复杂度 O(N) 空间复杂度 O(1)
Go: go 中math.Max,Min,Abs 都是float64， int要自己写</description>
    </item>
    
    <item>
      <title>1.Two Sum</title>
      <link>https://blog.arboat.top/posts/leetcode-1.two-sum.md/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-1.two-sum.md/</guid>
      <description>暴力法  时间复杂度：O(n^2) 空间复杂度：O(1)  Go:
func twoSum(nums []int, target int) []int { for i:=0;i&amp;lt;len(nums)-1;i++{ for j:=i+1;j&amp;lt;len(nums);j++{ if nums[j]+nums[i]==target { return []int{i,j} } } } }  哈希表  时间复杂度：O(n) 空间复杂度：O(n)  Go：
func twoSum(nums []int, target int) []int { m:=make(map[int]int) // nums 的v作为map的k，k作为map的v for k1,v1 := range nums { v2:=target - v1 if _,ok := m[v2]; ok { return []int{m[v2],k1} //已存在的是已经先存入map的，所以在前 } m[v1] = k1 } return nil }  Python:</description>
    </item>
    
    <item>
      <title>15.Three Sum</title>
      <link>https://blog.arboat.top/posts/leetcode-15.three-sum.md/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-15.three-sum.md/</guid>
      <description>暴力法  时间复杂度：O(n^3) 空间复杂度：O(n)  Go：
func threeSum(nums []int) [][]int { r:=make([][]int, 0) for i:=0 ; i &amp;lt; len(nums)-2 ; i++ { for j:=i+1; j&amp;lt;len(nums)-1; j++ { for k:= j+1; k&amp;lt;len(nums);k++ { if nums[i]+nums[j]+nums[k]=0 { r = append(r, []int{nums[i],nums[j],nums[j]}) } } } } return r }  Python:
def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]: res = [] for i in range(0,len(nums)-2): for j in range(i+1,len(nums)-1): for k in range(j+1,len(nums)): if nums[i]+nums[j]+nums[k] = 0: res.</description>
    </item>
    
    <item>
      <title>189. Rotate Array</title>
      <link>https://blog.arboat.top/posts/leetcode-189.-rotate-array/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-189.-rotate-array/</guid>
      <description>暴力法 时间复杂度O(n*k),空间负载度O(1)
额外数组法 下标为 i 的我们把它放到 (i+k)%数组长度 的位置。然后把新的数组拷贝到原数组中。
时空间复杂福 O（n）
3次反转法  时间复杂度： O(n) 空间复杂度：O(1)  Go:
func rotate(nums []int, k int) { k%=len(nums) reverse(nums,0,len(nums)-1) reverse(nums,0,k-1) reverse(nums,k,len(nums)-1) } func reverse(nums[]int,start,end int){ for start &amp;lt; end { temp:= nums[start] nums[start]=nums[end] nums[end]=temp start++ end-- } }  Python:
class Solution(object): def rotate(self, nums, k): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type k: int :rtype: None Do not return anything, modify nums in-place instead. &amp;quot;&amp;quot;&amp;quot; k%=len(nums) self.</description>
    </item>
    
    <item>
      <title>26. Remove Duplicates from Sorted Array</title>
      <link>https://blog.arboat.top/posts/leetcode-26.-remove-duplicates-from-sorted-array/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-26.-remove-duplicates-from-sorted-array/</guid>
      <description>双指针  时间复杂度：O(n) 空间复杂度：O(1)  Go：
func removeDuplicates(nums []int) int { if len(nums) == 0 { return 0 } i,j:=0,1 for ;j&amp;lt;len(nums);j++{ if nums[i]!=nums[j]{ i++ nums[i]=nums[j] } } return i+1 }  Python:
class Solution: def removeDuplicates(self, nums: List[int]) -&amp;gt; int: if len(nums) == 0: return 0 i=0 for j in range(1,len(nums)): if nums[i]!=nums[j]: i+=1 nums[i]=nums[j] return i+1  </description>
    </item>
    
    <item>
      <title>88.Merge Sorted Array</title>
      <link>https://blog.arboat.top/posts/leetcode-88.merge-sorted-array/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-88.merge-sorted-array/</guid>
      <description>合并后排序  时间复杂度 : O((n+m)log(n+m))。 空间复杂度 : O(1)。  双指针：从前往后：  时间复杂度 : O(n+m)。 空间复杂度 : O(m)。  双指针：从后往前：  时间复杂度 : O(n+m)。 空间复杂度 : O(1)。  Go:
func merge(nums1 []int, m int, nums2 []int, n int) { p, p1, p2:= m+n-1,m-1,n-1 for p1&amp;gt;=0 &amp;amp;&amp;amp; p2&amp;gt;=0 { if nums1[p1]&amp;gt;nums2[p2]{ nums1[p]=nums1[p1] p1-- } else { nums1[p]=nums2[p2] p2-- } p-- } if p1&amp;lt;0 { // nums1[:p2+1]=nums2[:p2+1] cannot assign to nums1[:p2 + 1] 右值 for i:=0;i&amp;lt;p2+1;i++{ nums1[i]=nums2[i] } } }  Python:</description>
    </item>
    
  </channel>
</rss>