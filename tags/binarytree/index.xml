<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>binaryTree on ArBlog</title>
    <link>https://blog.arboat.top/tags/binarytree/</link>
    <description>Recent content in binaryTree on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2020 00:00:04 +0800</lastBuildDate>
    
	<atom:link href="https://blog.arboat.top/tags/binarytree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>102.Binary Tree Level Order Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-102.binary-tree-level-order-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-102.binary-tree-level-order-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(logn)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ 少赋值内存占用少 var res = make([]int, 0) // leetcode 多个测试用例的时候要重置为零值 func postorderTraversal(root *TreeNode) []int { res=make([]int,0) postoder(root) return res } func postoder(root *TreeNode) { if root != nil { postoder(root.Left) postoder(root.Right) res=append(res,root.Val) } } // 两次append func postorderTraversal(root *TreeNode) []int { if root == nil { return []int{} } res := append(postorderTraversal(root.</description>
    </item>
    
    <item>
      <title>104.Maximum Depth of Binary Tree</title>
      <link>https://blog.arboat.top/posts/leetcode-104.maximum-depth-of-binary-tree/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-104.maximum-depth-of-binary-tree/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(height) 树的高度  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func maxDepth(root *TreeNode) int { if root == nil { return 0 } return max(maxDepth(root.Left),maxDepth(root.Right)) + 1 } func max(a,b int) int { if a &amp;gt; b { return a } return b } </description>
    </item>
    
    <item>
      <title>105.Construct Binary Tree from Preorder and Inorder Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-105.construct-binary-tree-from-preorder-and-inorder-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-105.construct-binary-tree-from-preorder-and-inorder-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode { for root!=nil { switch { case p.Val &amp;gt; root.Val &amp;amp;&amp;amp; q.Val &amp;gt; root.Val: root = root.Right case p.Val &amp;lt; root.Val &amp;amp;&amp;amp; q.Val &amp;lt; root.Val: root = root.Left default: return root } } return nil } </description>
    </item>
    
    <item>
      <title>111.Minimum Depth of Binary Tree</title>
      <link>https://blog.arboat.top/posts/leetcode-111.minimum-depth-of-binary-tree/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-111.minimum-depth-of-binary-tree/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func minDepth(root *TreeNode) int { if root == nil { return 0 } l := minDepth(root.Left) r := minDepth(root.Right) // 只有一个叶子节点 要返回另一边 if root.Left == nil { return r+1 } if root.Right == nil { return l+1 } return min(l, r) + 1 } func min(a, b int) int { if a &amp;lt; b { return a } return b } </description>
    </item>
    
    <item>
      <title>144.Binary Tree Preorder Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-144.binary-tree-preorder-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-144.binary-tree-preorder-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(logn)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ 少赋值内存占用少 var res = make([]int, 0) // leetcode 多个测试用例的时候要重置为零值 func preorderTraversal(root *TreeNode) []int { res = make([]int,0) preorder(root) return res } func preorder(root *TreeNode){ if root != nil { res = append(res,root.Val) preorder(root.Left) preorder(root.Right) } } // 两次append func preorderTraversal(root *TreeNode) []int { if root == nil { return []int{} } res := append([]int{root.</description>
    </item>
    
    <item>
      <title>145.Binary Tree Postorder Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-145.binary-tree-postorder-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-145.binary-tree-postorder-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(logn)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ 少赋值内存占用少 var res = make([]int, 0) // leetcode 多个测试用例的时候要重置为零值 func postorderTraversal(root *TreeNode) []int { res=make([]int,0) postoder(root) return res } func postoder(root *TreeNode) { if root != nil { postoder(root.Left) postoder(root.Right) res=append(res,root.Val) } } // 两次append func postorderTraversal(root *TreeNode) []int { if root == nil { return []int{} } res := append(postorderTraversal(root.</description>
    </item>
    
    <item>
      <title>235.Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blog.arboat.top/posts/leetcode-235.lowest-common-ancestor-of-a-binary-search-tree/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-235.lowest-common-ancestor-of-a-binary-search-tree/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode { for root!=nil { switch { case p.Val &amp;gt; root.Val &amp;amp;&amp;amp; q.Val &amp;gt; root.Val: root = root.Right case p.Val &amp;lt; root.Val &amp;amp;&amp;amp; q.Val &amp;lt; root.Val: root = root.Left default: return root } } return nil } </description>
    </item>
    
    <item>
      <title>235.Lowest Common Ancestor of a Binary Tree</title>
      <link>https://blog.arboat.top/posts/leetcode-236.lowest-common-ancestor-of-a-binary-tree-copy/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-236.lowest-common-ancestor-of-a-binary-tree-copy/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
/** * Definition for TreeNode. * type TreeNode struct { * Val int * Left *ListNode * Right *ListNode * } */ func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode { if root == nil { return nil } if root.Val == p.Val || root.Val == q.Val { return root } left := lowestCommonAncestor(root.Left, p, q) right := lowestCommonAncestor(root.Right, p, q) if left != nil &amp;amp;&amp;amp; right !</description>
    </item>
    
    <item>
      <title>297.Serialize and Deserialize Binary Tree</title>
      <link>https://blog.arboat.top/posts/leetcode-297.serialize-and-deserialize-binary-tree/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-297.serialize-and-deserialize-binary-tree/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ type Codec struct { res []string } func Constructor() Codec { return Codec{} } // Serializes a tree to a single string. func (this *Codec) serialize(root *TreeNode) string { if root == nil { return &amp;quot;#&amp;quot; } return strconv.Itoa(root.Val) + &amp;quot;,&amp;quot; + this.</description>
    </item>
    
    <item>
      <title>559.Maximum Depth of N-ary Tree</title>
      <link>https://blog.arboat.top/posts/leetcode-559.maximum-depth-of-n-ary-tree/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-559.maximum-depth-of-n-ary-tree/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度：最坏情况下, 树完全非平衡， 例如 每个节点有且仅有一个孩子节点，递归调用会发生 N 次（等于树的深度），所以存储调用栈需要 O(N)。 但是在最好情况下（树完全平衡），树的高度为 log(N)。 所以在此情况下空间复杂度为 O(log(N))  Go:
/** * Definition for a Node. * type Node struct { * Val int * Children []*Node * } */ func maxDepth(root *Node) int { if root == nil { return 0 } res:=0 for _,v:=range root.Children { res = max(res,maxDepth(v)) } return res + 1 } func max(a,b int) int { if a&amp;gt;b { return a } return b } </description>
    </item>
    
    <item>
      <title>589.N-ary Tree Preorder Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-589.n-ary-tree-preorder-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-589.n-ary-tree-preorder-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:平均O(logn), 最坏O(n)  Go:
/** * Definition for a Node. * type Node struct { * Val int * Children []*Node * } */ var res []int func preorder(root *Node) []int { res = []int{} dfs(root) return res } func dfs(root *Node){ if root != nil { res = append(res,root.Val) for _,v:=range root.Children { dfs(v) } } }  iteratively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
func preorder(root *Node) []int { var res []int var stack []*Node for len(stack)&amp;gt;0 || root !</description>
    </item>
    
    <item>
      <title>590.N-ary Tree Postorder Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-590.n-ary-tree-postorder-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-590.n-ary-tree-postorder-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(logn)  Go:
/** * Definition for a Node. * type Node struct { * Val int * Children []*Node * } */ var res []int func postorder(root *Node) []int { res = []int{} dfs(root) return res } func dfs(root *Node){ if root!=nil { for _,v:=range root.Children { dfs(v) } res = append(res,root.Val) } }  iteratively  时间复杂度:O(n) 空间复杂度:O(n)  Go:
func postorder(root *Node) []int { res:=[]int{} var stack []*Node for len(stack)&amp;gt;0 || root !</description>
    </item>
    
    <item>
      <title>94.Binary Tree Inorder Traversal</title>
      <link>https://blog.arboat.top/posts/leetcode-94.binary-tree-inorder-traversal/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:04 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-94.binary-tree-inorder-traversal/</guid>
      <description>recursively  时间复杂度:O(n) 空间复杂度:O(logn)  Go:
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func inorderTraversal(root *TreeNode) []int { var res []int var stack []*TreeNode for len(stack)&amp;gt;0 || root != nil { // 为了第一次判断nil for root != nil { stack = append(stack, root) root = root.Left } res = append(res,stack[len(stack)-1].Val) root = stack[len(stack)-1].Right stack = stack[:len(stack)-1] } return res }  </description>
    </item>
    
  </channel>
</rss>