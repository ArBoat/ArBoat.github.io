<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>divideConquer on ArBlog</title>
    <link>https://blog.arboat.top/tags/divideconquer/</link>
    <description>Recent content in divideConquer on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 00:00:03 +0800</lastBuildDate>
    
	<atom:link href="https://blog.arboat.top/tags/divideconquer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>169.Majority Element</title>
      <link>https://blog.arboat.top/posts/leetcode-169.majority-element/</link>
      <pubDate>Fri, 01 May 2020 00:00:03 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-169.majority-element/</guid>
      <description>排序取中位数:
 时间复杂度：O((nlogn) 空间复杂度：O(logn)  Go:
func majorityElement(nums []int) int { sort.Ints(nums) return nums[len(nums)/2] }  分治:
 时间复杂度：O((nlogn) 空间复杂度：O(logn)  func majorityElement(nums []int) int { return record(nums,0,len(nums)-1)
}
func countInSlice(nums []int, num, low, high int) int { count:=0 for i:=low;i&amp;lt;=high;i++{ if nums[i] == num { count++ } } return count } func record(nums []int, low, high int) int { if low == high { return nums[low] } mid:=(high-low)/2 + low left:=record(nums,low,mid) right:=record(nums,mid+1,high) if left == right { return left } leftCount:=countInSlice(nums,left,low,high) rightCount:=countInSlice(nums,right,low,high) if leftCount &amp;gt; rightCount { return left } return right }</description>
    </item>
    
  </channel>
</rss>