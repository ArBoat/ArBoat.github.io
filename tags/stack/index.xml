<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stack on ArBlog</title>
    <link>https://arboat.github.io/tags/stack/</link>
    <description>Recent content in stack on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2020 00:00:06 +0800</lastBuildDate>
    
	<atom:link href="https://arboat.github.io/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>20.Valid Parentheses</title>
      <link>https://arboat.github.io/posts/leetcode-20.valid-parentheses/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:06 +0800</pubDate>
      
      <guid>https://arboat.github.io/posts/leetcode-20.valid-parentheses/</guid>
      <description>时间复杂度:O(n) 空间复杂度:O(n)  stack Go:
func isValid(s string) bool { if s == &amp;quot;&amp;quot;{ return true } if len(s)%2!=0 { return false } m:= map[rune]rune{&#39;)&#39;:&#39;(&#39;,&#39;]&#39;:&#39;[&#39;,&#39;}&#39;:&#39;{&#39;} 单引号表示rune,注意用右括号作为key stack:=make([]rune,0) for _,v:=range s{ switch v { case &#39;(&#39;,&#39;[&#39;,&#39;{&#39;: stack = append(stack,v) case &#39;)&#39;,&#39;]&#39;,&#39;}&#39;: if len(stack)==0 || stack[len(stack)-1] != m[v] { return false } stack = stack[:len(stack)-1] } } return len(stack)==0 }  Python:
class Solution: def isValid(self, s: str) -&amp;gt; bool: if s==&amp;quot;&amp;quot;: return True if len(s)%2!</description>
    </item>
    
    <item>
      <title>155.Min Stack</title>
      <link>https://arboat.github.io/posts/leetcode-155.min-stack/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://arboat.github.io/posts/leetcode-155.min-stack/</guid>
      <description>问清空栈操作  辅助栈 注意相等时也压入辅助栈  时间复杂度:O(n) 空间复杂度:O(1)  Go:
type MinStack struct { stack []int min []int } /** initialize your data structure here. */ func Constructor() MinStack { return MinStack{} } func (this *MinStack) Push(x int) { this.stack = append(this.stack,x) if len(this.min)==0{ this.min = append(this.min,x) } else { if this.min[len(this.min)-1]&amp;gt;=x { // 等于很重要 this.min = append(this.min,x) } } } func (this *MinStack) Pop() { if this.stack[len(this.stack)-1] == this.min[len(this.min)-1]{ this.</description>
    </item>
    
    <item>
      <title>239.Sliding Window Maximum</title>
      <link>https://arboat.github.io/posts/leetcode-239.sliding-window-maximum/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://arboat.github.io/posts/leetcode-239.sliding-window-maximum/</guid>
      <description>暴力法 有 n-k+1个滑动窗口
 时间复杂度 O(nk) 空间复杂度 O(n-k+1)  deque  时间复杂度 O(n) 空间复杂度 O(n)  Go:
func maxSlidingWindow(nums []int, k int) []int { if nums == nil { return []int{} } //window 是一个维护当前最大值下表的deque window, res:= make([]int,0), make([]int,0) for i,v:= range nums { // 保证window长度，从左弹 if i&amp;gt;=k &amp;amp;&amp;amp; window[0]&amp;lt;= i-k { window = window[1:] } // 保证window[0]存最大，从右弹 for len(window)&amp;gt;0 &amp;amp;&amp;amp; nums[window[len(window)-1]] &amp;lt;= v{ window = window[:len(window)-1] } window = append(window,i) 第一个窗口 if i &amp;gt;= k-1 { res = append(res, nums[window[0]]) } } return res } </description>
    </item>
    
    <item>
      <title>42.Trapping Rain Water</title>
      <link>https://arboat.github.io/posts/leetcode-42.trapping-rain-water/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://arboat.github.io/posts/leetcode-42.trapping-rain-water/</guid>
      <description>暴力法  时间复杂度 O(n^2) 空间复杂度 O(1)  遍历所有高度， 以高度求最大矩形
单调栈 递减  时间复杂度 O(n) 空间复杂度 O(n)  Go:
func trap(height []int) int { res:=0 q:=make([]int,0) for i:=0;i&amp;lt;len(height);i++{ for len(q)&amp;gt;0 &amp;amp;&amp;amp; height[q[len(q)-1]]&amp;lt;height[i]{ temp:=height[q[len(q)-1]] q=q[:len(q)-1] if len(q)&amp;gt;0{ h:= min(height[q[len(q)-1]],height[i])-temp w:= i - q[len(q)-1] - 1 res+=h*w } } q=append(q,i) } return res } func min(x,y int) int { if x&amp;lt;y { return x } return y }  双指针 Go:
func trap(height []int) int { left,right:=0,len(height)-1 leftmax,rightmax:=0,0 res:=0 for left&amp;lt;=right{ if leftmax&amp;lt;rightmax{ if height[left]&amp;gt;leftmax{ leftmax = height[left] } else { res += leftmax - height[left] } left++ } else { if height[right]&amp;gt; rightmax { rightmax = height[right] } else { res+= rightmax - height[right] } right-- } } return res } </description>
    </item>
    
    <item>
      <title>641.Design Circular Deque</title>
      <link>https://arboat.github.io/posts/leetcode-641.design-circular-deque/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://arboat.github.io/posts/leetcode-641.design-circular-deque/</guid>
      <description>front指针指向第一个，rear指针指向最后一个下一位 Go:
type MyCircularDeque struct { data []int //data容量为实际长度+1 front int //指向队列头部第 1 个有效数据的位置 rear int //指向队列尾部（即最后 1 个有效数据）的下一个位置，即下一个从队尾入队元素的位置。 } /** Initialize your data structure here. Set the size of the deque to be k. */ func Constructor(k int) MyCircularDeque { return MyCircularDeque { data: make([]int,k+1,k+1), //rear指向下一个位置所谓data+1 front:0, rear:0, } } /** Adds an item at the front of Deque. Return true if the operation is successful. */ func (this *MyCircularDeque) InsertFront(value int) bool { if this.</description>
    </item>
    
    <item>
      <title>84.Largest Rectangle in Histogram</title>
      <link>https://arboat.github.io/posts/leetcode-84.largest-rectangle-in-histogram/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://arboat.github.io/posts/leetcode-84.largest-rectangle-in-histogram/</guid>
      <description>暴力法  时间复杂度 O(n^2) 空间复杂度 O(1)  遍历所有高度， 以高度求最大矩形
单调栈 用栈以空间换时间  时间复杂度 O(n) 空间复杂度 O(n)  左右分别遍历
Go:
func largestRectangleArea(heights []int) int { n:=len(heights) left, right := make([]int,n), make([]int, n) stack:= make([]int,0) for i:=0;i&amp;lt;n;i++ { for len(stack) &amp;gt;0 &amp;amp;&amp;amp; heights[stack[len(stack)-1]] &amp;gt;= heights[i]{ stack = stack[:len(stack)-1] } if len(stack) == 0{ left[i] = -1 } else { left[i] = stack[len(stack)-1] } stack = append(stack,i) } stack= make([]int,0) for i:=n-1; i&amp;gt;=0; i-- { for len(stack) &amp;gt;0 &amp;amp;&amp;amp; heights[stack[len(stack)-1]] &amp;gt;= heights[i]{ stack = stack[:len(stack)-1] } if len(stack) == 0{ right[i] = n } else { right[i] = stack[len(stack)-1] } stack = append(stack,i) } result:=0 for i:=0;i&amp;lt;n;i++ { result = max(result,(right[i]-left[i]-1)*heights[i]) } return result } func max(x, y int) int { if x &amp;gt; y { return x } return y }  单调栈，一遍遍历  时间复杂度 O(n) 空间复杂度 O(n)  Go：</description>
    </item>
    
  </channel>
</rss>