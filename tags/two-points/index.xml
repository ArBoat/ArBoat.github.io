<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>two points on ArBlog</title>
    <link>https://blog.arboat.top/tags/two-points/</link>
    <description>Recent content in two points on ArBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2020 00:05:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.arboat.top/tags/two-points/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>141.Linked List Cycle</title>
      <link>https://blog.arboat.top/posts/leetcode-141.linked-list-cycle/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-141.linked-list-cycle/</guid>
      <description>快慢指针  时间复杂度： O(n) 空间复杂度：O(1)  Go:
func hasCycle(head *ListNode) bool { if head == nil || head.Next == nil { return false } slow:=head fast:=head.Next for slow != fast { if fast ==nil || fast.Next == nil { return false } slow=slow.Next fast=fast.Next.Next } return true }  Python:
class Solution: def hasCycle(self, head: ListNode) -&amp;gt; bool: if head == None or head.next == None: return False slow, fast = head,head.</description>
    </item>
    
    <item>
      <title>84.Largest Rectangle in Histogram</title>
      <link>https://blog.arboat.top/posts/leetcode-142.linked-list-cycle-ii/</link>
      <pubDate>Thu, 21 May 2020 00:05:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-142.linked-list-cycle-ii/</guid>
      <description>快慢指针 2(F+a)=F+a+b+a -&amp;gt; F=b
 时间复杂度： O(n) 空间复杂度：O(1)  Go:
func detectCycle(head *ListNode) *ListNode { slow,fast:=head,head for { if fast==nil || fast.Next ==nil { return nil } slow = slow.Next fast = fast.Next.Next if slow == fast { break } } for head != slow { head = head.Next slow = slow.Next } return head }  Python:
class Solution: def detectCycle(self, head: ListNode) -&amp;gt; ListNode: slow, fast = head, head while True: if fast == None or fast.</description>
    </item>
    
    <item>
      <title>26. Remove Duplicates from Sorted Array</title>
      <link>https://blog.arboat.top/posts/leetcode-26.-remove-duplicates-from-sorted-array/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-26.-remove-duplicates-from-sorted-array/</guid>
      <description>双指针  时间复杂度：O(n) 空间复杂度：O(1)  Go：
func removeDuplicates(nums []int) int { if len(nums) == 0 { return 0 } i,j:=0,1 for ;j&amp;lt;len(nums);j++{ if nums[i]!=nums[j]{ i++ nums[i]=nums[j] } } return i+1 }  Python:
class Solution: def removeDuplicates(self, nums: List[int]) -&amp;gt; int: if len(nums) == 0: return 0 i=0 for j in range(1,len(nums)): if nums[i]!=nums[j]: i+=1 nums[i]=nums[j] return i+1  </description>
    </item>
    
    <item>
      <title>88.Merge Sorted Array</title>
      <link>https://blog.arboat.top/posts/leetcode-88.merge-sorted-array/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.arboat.top/posts/leetcode-88.merge-sorted-array/</guid>
      <description>合并后排序  时间复杂度 : O((n+m)log(n+m))。 空间复杂度 : O(1)。  双指针：从前往后：  时间复杂度 : O(n+m)。 空间复杂度 : O(m)。  双指针：从后往前：  时间复杂度 : O(n+m)。 空间复杂度 : O(1)。  Go:
func merge(nums1 []int, m int, nums2 []int, n int) { p, p1, p2:= m+n-1,m-1,n-1 for p1&amp;gt;=0 &amp;amp;&amp;amp; p2&amp;gt;=0 { if nums1[p1]&amp;gt;nums2[p2]{ nums1[p]=nums1[p1] p1-- } else { nums1[p]=nums2[p2] p2-- } p-- } if p1&amp;lt;0 { // nums1[:p2+1]=nums2[:p2+1] cannot assign to nums1[:p2 + 1] 右值 for i:=0;i&amp;lt;p2+1;i++{ nums1[i]=nums2[i] } } }  Python:</description>
    </item>
    
  </channel>
</rss>